export SAM_CLI_TELEMETRY=0
export EDITOR="nvim"

{{ if eq .machine "SERV WSL" -}}
PATH="/mnt/c/Users/DahmonBicheno/AppData/Local/Programs/Microsoft VS Code/bin:$PATH"
PATH="/snap/bin:$PATH"
PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

{{ end -}}
{{ if eq .machine "Shine" -}}
export AWS_PROFILE=shine
alias shine-aws-login="op run --env-file=$HOME/.config/op/shine-aws-env -- saml2aws login --force"

{{ end -}}
export PNPM_HOME="/home/dahmon/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# History - https://registerspill.thorstenball.com/p/which-command-did-you-run-1731-days
HISTFILE=~/.zsh_history
HISTSIZE=100000
SAVEHIST=100000

# Immediately append to history file:
setopt INC_APPEND_HISTORY

# Record timestamp in history:
setopt EXTENDED_HISTORY

# Expire duplicate entries first when trimming history:
setopt HIST_EXPIRE_DUPS_FIRST

# Dont record an entry that was just recorded again:
setopt HIST_IGNORE_DUPS

# Delete old recorded entry if new entry is a duplicate:
setopt HIST_IGNORE_ALL_DUPS

# Do not display a line previously found:
setopt HIST_FIND_NO_DUPS

# Dont record an entry starting with a space:
setopt HIST_IGNORE_SPACE

# Dont write duplicate entries in the history file:
setopt HIST_SAVE_NO_DUPS

# Share history between all sessions:
setopt SHARE_HISTORY

# Execute commands using history (e.g.: using !$) immediatel:
unsetopt HIST_VERIFY

# --- Oh My ZSH ---

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# update automatically without asking
zstyle ':omz:update' mode auto

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Aliases
# bat installs as batcat on Linux with apt
alias cat='{{ if eq .is_arm64_linux "true" }}batcat{{ else }}bat{{ end }} --paging=never -p'

# chezmoi aliases
alias cm=chezmoi

plugin_repos=(
	zsh-users/zsh-syntax-highlighting
	lukechilds/zsh-nvm
)
ZSH_CUSTOM_PLUGINS="$HOME/.oh-my-zsh/custom/plugins"
for repo in $plugin_repos; do
	if [[ ! -d $ZSH_CUSTOM_PLUGINS/${repo:t} ]]; then
		git clone --depth 1 https://github.com/${repo} $ZSH_CUSTOM_PLUGINS/${repo:t}
	fi
done

# zsh-syntax-highlighting must be last
plugins+=(
	git
	zsh-nvm
	zsh-syntax-highlighting
)

source $ZSH/oh-my-zsh.sh
if command -v fzf &>/dev/null; then
  # Raspberry Pi apk-get installed is outdated, no --zsh flag
  {{ if eq .is_arm64_linux "true" -}}
  source /usr/share/doc/fzf/examples/key-bindings.zsh
  source /usr/share/doc/fzf/examples/completion.zsh
  {{ else -}}
  source <(fzf --zsh)
  {{ end -}}

  # Use fd instead of find for fzf
  export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
  export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

  _fzf_compgen_path() {
    fd --hidden --exclude .git . "$1"
  }

  _fzf_compgen_dir() {
    fd --type=d --hidden --exclude .git . "$1"
  }

  # Setup fzf-git.sh
  if [[ ! -d ~/fzf-git ]]; then
    git clone --depth 1 https://github.com/junegunn/fzf-git.sh.git ~/fzf-git
  fi
  source ~/fzf-git/fzf-git.sh
else
  echo "fzf not installed"
fi

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /opt/homebrew/bin/terraform terraform

export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv &>/dev/null; then
  eval "$(pyenv init - zsh)"
else
  echo "pyenv not installed"
fi
